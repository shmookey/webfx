// Effects are generated by the update function as a result of Actions. Effect
// names start with a noun.

export const

SourceCreated           = (descriptor) => ({type:'SourceCreated', descriptor}),
SourceDeleted           = (id) => ({type:'SourceDeleted', id}),
SourceRenamed           = (id, name) => ({type:'SourceRenamed', id, name}),
SourceSetColour         = (id, colour) => ({type:'SourceSetColour', id, colour}),
SourceSetCoefficients   = (id, coefficients) => ({type:'SourceSetCoefficients', id, coefficients}),
SourceMoved             = (id, position) => ({type:'SourceMoved', id, position}),
SourceEnabled           = (id) => ({type:'SourceEnabled', id}),
SourceDisabled          = (id) => ({type:'SourceDisabled', id}),
SourceSetAnnotations    = (id, enabled) => ({type:'SourceSetAnnotations', id, enabled}),

AntennaCreated          = (descriptor) => ({type:'AntennaCreated', descriptor}),
AntennaDeleted          = (id) => ({type:'AntennaDeleted', id}),
AntennaRenamed          = (id, name) => ({type:'AntennaRenamed', id, name}),
AntennaSetColour        = (id, colour) => ({type:'AntennaSetColour', id, colour}),
AntennaMoved            = (id, position) => ({type:'AntennaMoved', id, position}),
AntennaEnabled          = (id) => ({type:'AntennaEnabled', id}),
AntennaDisabled         = (id) => ({type:'AntennaDisabled', id}),
AntennaSetAnnotations   = (id, enabled) => ({type:'AntennaSetAnnotations', id, enabled}),

BaselineCreated         = (descriptor) => ({type:'BaselineCreated', descriptor}),
BaselineDeleted         = (id) => ({type:'BaselineDeleted', id}),
BaselineMoved           = (id, position) => ({type:'BaselineMoved', id, position}),
BaselineSetEnabled      = (id, enabled) => ({type:'BaselineSetEnabled', id, enabled}),
BaselineSetAnnotations  = (id, annotations) => ({type:'BaselineSetAnnotations', id, annotations}),

ApertureSetWavelength   = (wavelength) => ({type:'ApertureSetWavelength', wavelength}),
ApertureSetDeclination  = (declination) => ({type:'ApertureSetDeclination', declination}),
ApertureSetAscension    = (ascension) => ({type:'ApertureSetAscension', ascension}),

CameraModeChanged       = (mode) => ({type:'CameraModeChanged', mode}),
CameraFlyaroundEnabled  = () => ({type:'CameraFlyaroundEnabled'}),
CameraFlyaroundDisabled = () => ({type:'CameraFlyaroundDisabled'}),
CameraOrientationReset  = () => ({type:'CameraOrientationReset'}),
CameraPositionReset     = () => ({type:'CameraPositionReset'}),
CameraTargetSet         = (entityType, id) => ({type:'CameraTargetSet', entityType, id}),
AspectChanged           = (aspect) => ({type:'AspectChanged', aspect}),
DragModeChanged         = (mode) => ({type:'DragModeChanged', mode}),

NullEffect              = () => ({type:'NullEffect'});

